//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/HistoryNavControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HistoryNavControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HistoryNavControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HistoryNavControls"",
    ""maps"": [
        {
            ""name"": ""HistoryNavigate"",
            ""id"": ""0c8fd15e-2303-45fd-a9f7-6b340d73e564"",
            ""actions"": [
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""9296d7c5-7321-4365-bbfa-d0e5b581d90d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redo"",
                    ""type"": ""Button"",
                    ""id"": ""45db3b36-1fd6-4609-9b6c-90317bb05455"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3147a2cc-d06e-40c4-8d31-f39a3eb6ca2f"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fbf3214-8c61-456f-908b-68e40fd68d77"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HistoryNavigate
        m_HistoryNavigate = asset.FindActionMap("HistoryNavigate", throwIfNotFound: true);
        m_HistoryNavigate_Undo = m_HistoryNavigate.FindAction("Undo", throwIfNotFound: true);
        m_HistoryNavigate_Redo = m_HistoryNavigate.FindAction("Redo", throwIfNotFound: true);
    }

    ~@HistoryNavControls()
    {
        UnityEngine.Debug.Assert(!m_HistoryNavigate.enabled, "This will cause a leak and performance issues, HistoryNavControls.HistoryNavigate.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HistoryNavigate
    private readonly InputActionMap m_HistoryNavigate;
    private List<IHistoryNavigateActions> m_HistoryNavigateActionsCallbackInterfaces = new List<IHistoryNavigateActions>();
    private readonly InputAction m_HistoryNavigate_Undo;
    private readonly InputAction m_HistoryNavigate_Redo;
    public struct HistoryNavigateActions
    {
        private @HistoryNavControls m_Wrapper;
        public HistoryNavigateActions(@HistoryNavControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Undo => m_Wrapper.m_HistoryNavigate_Undo;
        public InputAction @Redo => m_Wrapper.m_HistoryNavigate_Redo;
        public InputActionMap Get() { return m_Wrapper.m_HistoryNavigate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HistoryNavigateActions set) { return set.Get(); }
        public void AddCallbacks(IHistoryNavigateActions instance)
        {
            if (instance == null || m_Wrapper.m_HistoryNavigateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HistoryNavigateActionsCallbackInterfaces.Add(instance);
            @Undo.started += instance.OnUndo;
            @Undo.performed += instance.OnUndo;
            @Undo.canceled += instance.OnUndo;
            @Redo.started += instance.OnRedo;
            @Redo.performed += instance.OnRedo;
            @Redo.canceled += instance.OnRedo;
        }

        private void UnregisterCallbacks(IHistoryNavigateActions instance)
        {
            @Undo.started -= instance.OnUndo;
            @Undo.performed -= instance.OnUndo;
            @Undo.canceled -= instance.OnUndo;
            @Redo.started -= instance.OnRedo;
            @Redo.performed -= instance.OnRedo;
            @Redo.canceled -= instance.OnRedo;
        }

        public void RemoveCallbacks(IHistoryNavigateActions instance)
        {
            if (m_Wrapper.m_HistoryNavigateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHistoryNavigateActions instance)
        {
            foreach (var item in m_Wrapper.m_HistoryNavigateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HistoryNavigateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HistoryNavigateActions @HistoryNavigate => new HistoryNavigateActions(this);
    public interface IHistoryNavigateActions
    {
        void OnUndo(InputAction.CallbackContext context);
        void OnRedo(InputAction.CallbackContext context);
    }
}
